#include <stdio.h>
#include <time.h>
#include <sys/times.h>
#include <limits.h>
#include <unistd.h>

#include "arraySize.h"

//#define SIZE 8000
#define ITERATIONS (1000000)
#define STEP 1000

struct data {

  struct data* next;
};

void FisherYatesShuffle(int * array, int size){
  srand(time(NULL));
  for (int i = size-1; i > 0 ; i--){  
    int j = rand() % i;
    int tmp = array[i];
    array[i] = array[j];
    array[j] = tmp;
    /*for (int i = 0; i < SIZE; ++i){
      printf("%d\t", array[i]);
    }
    printf("\troll: %d\n", j);*/
  }
}

int main() {
  int indezes[SIZE] = {0};
  struct data dataArray[SIZE];
  //printf("size of struct-array: %d byte\n", sizeof (dataArray));
  for (int i = 0; i < SIZE; ++i){
    indezes[i] = i;
  }
  FisherYatesShuffle(&indezes, SIZE);
  for (int i = 0; i < SIZE; ++i){
    //printf("indezes[%d]: %d\n",i,indezes[i]);
  }
  for (int i = 0; i < SIZE; ++i){
    dataArray[i].next = &(dataArray[indezes[i]]);
    //printf("%d.next: %d\n", i, dataArray[i].next->n);
  }
  
  /* CLK_TCK: ticks per second -- is system dependent */
  #ifndef CLK_TCK
  int CLK_TCK = sysconf(_SC_CLK_TCK);
  #endif
  
  clock_t ticks;
  double nanosecs;
  struct tms timebuf1, timebuf2;
  
  /* initialization for loop */
  struct data* tmp = &(dataArray[0]);
  int i = 0;
  
  times(&timebuf1);
    /********** start time measurment **************/
  for (int i = 0; i < (ITERATIONS); ++i){
    tmp = tmp->next;
  }
  /********** stop time measurment ****************/
  times(&timebuf2);
  /* get number of ticks */
  ticks = timebuf2.tms_utime - timebuf1.tms_utime;
  /* convert to human readable unit: nano seconds */
  nanosecs = (double)ticks / CLK_TCK * 1000000000;
  printf("size of array: %d\tduration: %f ns\t (%f s)\n", SIZE, nanosecs, (nanosecs/(double)1000000000));
}
