import java.util.ArrayList;
import java.util.List;

public class BreadthSearch {
	
	private List<State> solution = new ArrayList<State>();
	private List<State> solutionTracking = new ArrayList<State>();
	private List<State> path = new ArrayList<State>();
	
	State start, finish;

	public void getSolution(State current) {
		path.add(current);
		int index = -1;
		if (current == this.start)
			return;
		ArrayList<State> l = current.getFollowingStates();
		
		for (State s : current.getFollowingStates()){
			if (index == -1){
				index = solutionTracking.indexOf(s);
			}
			if (solutionTracking.indexOf(s) < index && solutionTracking.indexOf(s) != -1)
				index = solutionTracking.indexOf(s);
		}
		getSolution(solutionTracking.get(index));
	}
	
	public void solve(State first, State finish){
		this.start = first;
		this.finish = finish;
		first.setVisited(true);
		solution.add(first);	
		solutionTracking.add(first);
		solveNext(first, finish);
//		getSolution(finish);
//		System.out.println(solutionTracking);
//		System.out.println(path);
	}	

	public void solveNext(State current, State finish){
		State next = solution.remove(0);
		next.setVisited(true);
		if (next.equals(finish)){
			return;
		}
		for (State s : next.getFollowingStates()){
			solution.add(s);	
			solutionTracking.add(s);
			s.setVisited(true);
		}
		solveNext(solution.get(0), finish);
	}
}
